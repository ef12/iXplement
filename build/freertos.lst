ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"freertos.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vApplicationIdleHook,"ax",%progbits
  20              		.align	1
  21              		.weak	vApplicationIdleHook
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	vApplicationIdleHook:
  27              	.LFB139:
  28              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** 
  25:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/freertos.c **** 
  28:Core/Src/freertos.c **** /* USER CODE END Includes */
  29:Core/Src/freertos.c **** 
  30:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 2


  31:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/freertos.c **** 
  33:Core/Src/freertos.c **** /* USER CODE END PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  37:Core/Src/freertos.c **** 
  38:Core/Src/freertos.c **** /* USER CODE END PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  42:Core/Src/freertos.c **** 
  43:Core/Src/freertos.c **** /* USER CODE END PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  47:Core/Src/freertos.c **** 
  48:Core/Src/freertos.c **** /* USER CODE END Variables */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  52:Core/Src/freertos.c **** 
  53:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  56:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  57:Core/Src/freertos.c **** 
  58:Core/Src/freertos.c **** /* Hook prototypes */
  59:Core/Src/freertos.c **** void vApplicationIdleHook(void);
  60:Core/Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  61:Core/Src/freertos.c **** void vApplicationMallocFailedHook(void);
  62:Core/Src/freertos.c **** 
  63:Core/Src/freertos.c **** /* USER CODE BEGIN 2 */
  64:Core/Src/freertos.c **** __weak void vApplicationIdleHook( void )
  65:Core/Src/freertos.c **** {
  29              		.loc 1 65 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  66:Core/Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  67:Core/Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  68:Core/Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  69:Core/Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
  70:Core/Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
  71:Core/Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  72:Core/Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  73:Core/Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  74:Core/Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  75:Core/Src/freertos.c **** }
  34              		.loc 1 75 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE139:
  39              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  40              		.align	1
  41              		.weak	vApplicationStackOverflowHook
ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 3


  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	vApplicationStackOverflowHook:
  47              	.LVL0:
  48              	.LFB140:
  76:Core/Src/freertos.c **** /* USER CODE END 2 */
  77:Core/Src/freertos.c **** 
  78:Core/Src/freertos.c **** /* USER CODE BEGIN 4 */
  79:Core/Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  80:Core/Src/freertos.c **** {
  49              		.loc 1 80 1 view -0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  81:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
  82:Core/Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  83:Core/Src/freertos.c ****    called if a stack overflow is detected. */
  84:Core/Src/freertos.c **** }
  54              		.loc 1 84 1 view .LVU3
  55 0000 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE140:
  59              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  60              		.align	1
  61              		.weak	vApplicationMallocFailedHook
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	vApplicationMallocFailedHook:
  67              	.LFB141:
  85:Core/Src/freertos.c **** /* USER CODE END 4 */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c **** /* USER CODE BEGIN 5 */
  88:Core/Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
  89:Core/Src/freertos.c **** {
  68              		.loc 1 89 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  90:Core/Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
  91:Core/Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
  92:Core/Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
  93:Core/Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
  94:Core/Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
  95:Core/Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
  96:Core/Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
  97:Core/Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
  98:Core/Src/freertos.c ****    to query the size of free heap space that remains (although it does not
  99:Core/Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 100:Core/Src/freertos.c **** }
  73              		.loc 1 100 1 view .LVU5
  74 0000 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE141:
ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 4


  78              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  79              		.align	1
  80              		.global	vApplicationGetIdleTaskMemory
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  85              	vApplicationGetIdleTaskMemory:
  86              	.LVL1:
  87              	.LFB142:
 101:Core/Src/freertos.c **** /* USER CODE END 5 */
 102:Core/Src/freertos.c **** 
 103:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 104:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 105:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 106:Core/Src/freertos.c **** 
 107:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 108:Core/Src/freertos.c **** {
  88              		.loc 1 108 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
 109:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  93              		.loc 1 109 3 view .LVU7
  94              		.loc 1 109 25 is_stmt 0 view .LVU8
  95 0000 034B     		ldr	r3, .L5
  96 0002 0360     		str	r3, [r0]
 110:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  97              		.loc 1 110 3 is_stmt 1 view .LVU9
  98              		.loc 1 110 27 is_stmt 0 view .LVU10
  99 0004 034B     		ldr	r3, .L5+4
 100 0006 0B60     		str	r3, [r1]
 111:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 101              		.loc 1 111 3 is_stmt 1 view .LVU11
 102              		.loc 1 111 25 is_stmt 0 view .LVU12
 103 0008 8023     		movs	r3, #128
 104 000a 1360     		str	r3, [r2]
 112:Core/Src/freertos.c ****   /* place for user code */
 113:Core/Src/freertos.c **** }
 105              		.loc 1 113 1 view .LVU13
 106 000c 7047     		bx	lr
 107              	.L6:
 108 000e 00BF     		.align	2
 109              	.L5:
 110 0010 00000000 		.word	.LANCHOR0
 111 0014 00000000 		.word	.LANCHOR1
 112              		.cfi_endproc
 113              	.LFE142:
 115              		.section	.bss.xIdleStack,"aw",%nobits
 116              		.align	2
 117              		.set	.LANCHOR1,. + 0
 120              	xIdleStack:
 121 0000 00000000 		.space	512
 121      00000000 
 121      00000000 
 121      00000000 
 121      00000000 
ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 5


 122              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 123              		.align	2
 124              		.set	.LANCHOR0,. + 0
 127              	xIdleTaskTCBBuffer:
 128 0000 00000000 		.space	88
 128      00000000 
 128      00000000 
 128      00000000 
 128      00000000 
 129              		.text
 130              	.Letext0:
 131              		.file 2 "c:\\armgcc_toolchain\\gcc-arm-none-eabi-10.3-2021.10-win32\\gcc-arm-none-eabi-10.3-2021.1
 132              		.file 3 "c:\\armgcc_toolchain\\gcc-arm-none-eabi-10.3-2021.10-win32\\gcc-arm-none-eabi-10.3-2021.1
 133              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 134              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 135              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:20     .text.vApplicationIdleHook:00000000 $t
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:26     .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:40     .text.vApplicationStackOverflowHook:00000000 $t
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:46     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:60     .text.vApplicationMallocFailedHook:00000000 $t
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:66     .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:79     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:85     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:110    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:116    .bss.xIdleStack:00000000 $d
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:120    .bss.xIdleStack:00000000 xIdleStack
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:123    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\Users\efrank\AppData\Local\Temp\ccgoFcVN.s:127    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer

NO UNDEFINED SYMBOLS
